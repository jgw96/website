/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/router';

import 'st-img';

import { CarbonAd as CarbonAd } from './components/carbon-ad/carbon-ad';

interface HTMLCarbonAdElement extends CarbonAd, HTMLElement {
}
declare var HTMLCarbonAdElement: {
  prototype: HTMLCarbonAdElement;
  new (): HTMLCarbonAdElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "carbon-ad": HTMLCarbonAdElement;
  }
  interface ElementTagNameMap {
      "carbon-ad": HTMLCarbonAdElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "carbon-ad": JSXElements.CarbonAdAttributes;
      }
  }
  namespace JSXElements {
      export interface CarbonAdAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { ComponentsButtons as ComponentsButtons } from './components/components/buttons/components-buttons';

interface HTMLComponentsButtonsElement extends ComponentsButtons, HTMLElement {
}
declare var HTMLComponentsButtonsElement: {
  prototype: HTMLComponentsButtonsElement;
  new (): HTMLComponentsButtonsElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "components-buttons": HTMLComponentsButtonsElement;
  }
  interface ElementTagNameMap {
      "components-buttons": HTMLComponentsButtonsElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "components-buttons": JSXElements.ComponentsButtonsAttributes;
      }
  }
  namespace JSXElements {
      export interface ComponentsButtonsAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ComponentsAccordions as ComponentsAccordions } from './components/components/components-accordions';

interface HTMLComponentsAccordionsElement extends ComponentsAccordions, HTMLElement {
}
declare var HTMLComponentsAccordionsElement: {
  prototype: HTMLComponentsAccordionsElement;
  new (): HTMLComponentsAccordionsElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "components-accordions": HTMLComponentsAccordionsElement;
  }
  interface ElementTagNameMap {
      "components-accordions": HTMLComponentsAccordionsElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "components-accordions": JSXElements.ComponentsAccordionsAttributes;
      }
  }
  namespace JSXElements {
      export interface ComponentsAccordionsAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ComponentsAddresses as ComponentsAddresses } from './components/components/components-addresses';

interface HTMLComponentsAddressesElement extends ComponentsAddresses, HTMLElement {
}
declare var HTMLComponentsAddressesElement: {
  prototype: HTMLComponentsAddressesElement;
  new (): HTMLComponentsAddressesElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "components-addresses": HTMLComponentsAddressesElement;
  }
  interface ElementTagNameMap {
      "components-addresses": HTMLComponentsAddressesElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "components-addresses": JSXElements.ComponentsAddressesAttributes;
      }
  }
  namespace JSXElements {
      export interface ComponentsAddressesAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ComponentsAlerts as ComponentsAlerts } from './components/components/components-alerts';

interface HTMLComponentsAlertsElement extends ComponentsAlerts, HTMLElement {
}
declare var HTMLComponentsAlertsElement: {
  prototype: HTMLComponentsAlertsElement;
  new (): HTMLComponentsAlertsElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "components-alerts": HTMLComponentsAlertsElement;
  }
  interface ElementTagNameMap {
      "components-alerts": HTMLComponentsAlertsElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "components-alerts": JSXElements.ComponentsAlertsAttributes;
      }
  }
  namespace JSXElements {
      export interface ComponentsAlertsAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ComponentsAvatars as ComponentsAvatars } from './components/components/components-avatars';

interface HTMLComponentsAvatarsElement extends ComponentsAvatars, HTMLElement {
}
declare var HTMLComponentsAvatarsElement: {
  prototype: HTMLComponentsAvatarsElement;
  new (): HTMLComponentsAvatarsElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "components-avatars": HTMLComponentsAvatarsElement;
  }
  interface ElementTagNameMap {
      "components-avatars": HTMLComponentsAvatarsElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "components-avatars": JSXElements.ComponentsAvatarsAttributes;
      }
  }
  namespace JSXElements {
      export interface ComponentsAvatarsAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ComponentsBadges as ComponentsBadges } from './components/components/components-badges';

interface HTMLComponentsBadgesElement extends ComponentsBadges, HTMLElement {
}
declare var HTMLComponentsBadgesElement: {
  prototype: HTMLComponentsBadgesElement;
  new (): HTMLComponentsBadgesElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "components-badges": HTMLComponentsBadgesElement;
  }
  interface ElementTagNameMap {
      "components-badges": HTMLComponentsBadgesElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "components-badges": JSXElements.ComponentsBadgesAttributes;
      }
  }
  namespace JSXElements {
      export interface ComponentsBadgesAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ComponentsBreadcrumbs as ComponentsBreadcrumbs } from './components/components/components-breadcrumbs';

interface HTMLComponentsBreadcrumbsElement extends ComponentsBreadcrumbs, HTMLElement {
}
declare var HTMLComponentsBreadcrumbsElement: {
  prototype: HTMLComponentsBreadcrumbsElement;
  new (): HTMLComponentsBreadcrumbsElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "components-breadcrumbs": HTMLComponentsBreadcrumbsElement;
  }
  interface ElementTagNameMap {
      "components-breadcrumbs": HTMLComponentsBreadcrumbsElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "components-breadcrumbs": JSXElements.ComponentsBreadcrumbsAttributes;
      }
  }
  namespace JSXElements {
      export interface ComponentsBreadcrumbsAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ComponentsBubbles as ComponentsBubbles } from './components/components/components-bubbles';

interface HTMLComponentsBubblesElement extends ComponentsBubbles, HTMLElement {
}
declare var HTMLComponentsBubblesElement: {
  prototype: HTMLComponentsBubblesElement;
  new (): HTMLComponentsBubblesElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "components-bubbles": HTMLComponentsBubblesElement;
  }
  interface ElementTagNameMap {
      "components-bubbles": HTMLComponentsBubblesElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "components-bubbles": JSXElements.ComponentsBubblesAttributes;
      }
  }
  namespace JSXElements {
      export interface ComponentsBubblesAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ComponentsCalendars as ComponentsCalendars } from './components/components/components-calendars';

interface HTMLComponentsCalendarsElement extends ComponentsCalendars, HTMLElement {
}
declare var HTMLComponentsCalendarsElement: {
  prototype: HTMLComponentsCalendarsElement;
  new (): HTMLComponentsCalendarsElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "components-calendars": HTMLComponentsCalendarsElement;
  }
  interface ElementTagNameMap {
      "components-calendars": HTMLComponentsCalendarsElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "components-calendars": JSXElements.ComponentsCalendarsAttributes;
      }
  }
  namespace JSXElements {
      export interface ComponentsCalendarsAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ComponentsCards as ComponentsCards } from './components/components/components-cards';

interface HTMLComponentsCardsElement extends ComponentsCards, HTMLElement {
}
declare var HTMLComponentsCardsElement: {
  prototype: HTMLComponentsCardsElement;
  new (): HTMLComponentsCardsElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "components-cards": HTMLComponentsCardsElement;
  }
  interface ElementTagNameMap {
      "components-cards": HTMLComponentsCardsElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "components-cards": JSXElements.ComponentsCardsAttributes;
      }
  }
  namespace JSXElements {
      export interface ComponentsCardsAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ComponentsHeadings as ComponentsHeadings } from './components/components/components-headings';

interface HTMLComponentsHeadingsElement extends ComponentsHeadings, HTMLElement {
}
declare var HTMLComponentsHeadingsElement: {
  prototype: HTMLComponentsHeadingsElement;
  new (): HTMLComponentsHeadingsElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "components-headings": HTMLComponentsHeadingsElement;
  }
  interface ElementTagNameMap {
      "components-headings": HTMLComponentsHeadingsElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "components-headings": JSXElements.ComponentsHeadingsAttributes;
      }
  }
  namespace JSXElements {
      export interface ComponentsHeadingsAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ComponentsInputs as ComponentsInputs } from './components/components/components-inputs';

interface HTMLComponentsInputsElement extends ComponentsInputs, HTMLElement {
}
declare var HTMLComponentsInputsElement: {
  prototype: HTMLComponentsInputsElement;
  new (): HTMLComponentsInputsElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "components-inputs": HTMLComponentsInputsElement;
  }
  interface ElementTagNameMap {
      "components-inputs": HTMLComponentsInputsElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "components-inputs": JSXElements.ComponentsInputsAttributes;
      }
  }
  namespace JSXElements {
      export interface ComponentsInputsAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ComponentsLists as ComponentsLists } from './components/components/components-lists';

interface HTMLComponentsListsElement extends ComponentsLists, HTMLElement {
}
declare var HTMLComponentsListsElement: {
  prototype: HTMLComponentsListsElement;
  new (): HTMLComponentsListsElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "components-lists": HTMLComponentsListsElement;
  }
  interface ElementTagNameMap {
      "components-lists": HTMLComponentsListsElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "components-lists": JSXElements.ComponentsListsAttributes;
      }
  }
  namespace JSXElements {
      export interface ComponentsListsAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ComponentsMenus as ComponentsMenus } from './components/components/components-menus';

interface HTMLComponentsMenusElement extends ComponentsMenus, HTMLElement {
}
declare var HTMLComponentsMenusElement: {
  prototype: HTMLComponentsMenusElement;
  new (): HTMLComponentsMenusElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "components-menus": HTMLComponentsMenusElement;
  }
  interface ElementTagNameMap {
      "components-menus": HTMLComponentsMenusElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "components-menus": JSXElements.ComponentsMenusAttributes;
      }
  }
  namespace JSXElements {
      export interface ComponentsMenusAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ComponentsNavs as ComponentsNavs } from './components/components/components-navs';

interface HTMLComponentsNavsElement extends ComponentsNavs, HTMLElement {
}
declare var HTMLComponentsNavsElement: {
  prototype: HTMLComponentsNavsElement;
  new (): HTMLComponentsNavsElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "components-navs": HTMLComponentsNavsElement;
  }
  interface ElementTagNameMap {
      "components-navs": HTMLComponentsNavsElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "components-navs": JSXElements.ComponentsNavsAttributes;
      }
  }
  namespace JSXElements {
      export interface ComponentsNavsAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ComponentsOverlays as ComponentsOverlays } from './components/components/components-overlays';

interface HTMLComponentsOverlaysElement extends ComponentsOverlays, HTMLElement {
}
declare var HTMLComponentsOverlaysElement: {
  prototype: HTMLComponentsOverlaysElement;
  new (): HTMLComponentsOverlaysElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "components-overlays": HTMLComponentsOverlaysElement;
  }
  interface ElementTagNameMap {
      "components-overlays": HTMLComponentsOverlaysElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "components-overlays": JSXElements.ComponentsOverlaysAttributes;
      }
  }
  namespace JSXElements {
      export interface ComponentsOverlaysAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ComponentsPagination as ComponentsPagination } from './components/components/components-pagination';

interface HTMLComponentsPaginationElement extends ComponentsPagination, HTMLElement {
}
declare var HTMLComponentsPaginationElement: {
  prototype: HTMLComponentsPaginationElement;
  new (): HTMLComponentsPaginationElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "components-pagination": HTMLComponentsPaginationElement;
  }
  interface ElementTagNameMap {
      "components-pagination": HTMLComponentsPaginationElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "components-pagination": JSXElements.ComponentsPaginationAttributes;
      }
  }
  namespace JSXElements {
      export interface ComponentsPaginationAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ComponentsProgress as ComponentsProgress } from './components/components/components-progress';

interface HTMLComponentsProgressElement extends ComponentsProgress, HTMLElement {
}
declare var HTMLComponentsProgressElement: {
  prototype: HTMLComponentsProgressElement;
  new (): HTMLComponentsProgressElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "components-progress": HTMLComponentsProgressElement;
  }
  interface ElementTagNameMap {
      "components-progress": HTMLComponentsProgressElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "components-progress": JSXElements.ComponentsProgressAttributes;
      }
  }
  namespace JSXElements {
      export interface ComponentsProgressAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ComponentsRanges as ComponentsRanges } from './components/components/components-ranges';

interface HTMLComponentsRangesElement extends ComponentsRanges, HTMLElement {
}
declare var HTMLComponentsRangesElement: {
  prototype: HTMLComponentsRangesElement;
  new (): HTMLComponentsRangesElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "components-ranges": HTMLComponentsRangesElement;
  }
  interface ElementTagNameMap {
      "components-ranges": HTMLComponentsRangesElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "components-ranges": JSXElements.ComponentsRangesAttributes;
      }
  }
  namespace JSXElements {
      export interface ComponentsRangesAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ComponentTables as ComponentsTables } from './components/components/components-tables';

interface HTMLComponentsTablesElement extends ComponentsTables, HTMLElement {
}
declare var HTMLComponentsTablesElement: {
  prototype: HTMLComponentsTablesElement;
  new (): HTMLComponentsTablesElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "components-tables": HTMLComponentsTablesElement;
  }
  interface ElementTagNameMap {
      "components-tables": HTMLComponentsTablesElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "components-tables": JSXElements.ComponentsTablesAttributes;
      }
  }
  namespace JSXElements {
      export interface ComponentsTablesAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ComponentsTabs as ComponentsTabs } from './components/components/components-tabs';

interface HTMLComponentsTabsElement extends ComponentsTabs, HTMLElement {
}
declare var HTMLComponentsTabsElement: {
  prototype: HTMLComponentsTabsElement;
  new (): HTMLComponentsTabsElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "components-tabs": HTMLComponentsTabsElement;
  }
  interface ElementTagNameMap {
      "components-tabs": HTMLComponentsTabsElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "components-tabs": JSXElements.ComponentsTabsAttributes;
      }
  }
  namespace JSXElements {
      export interface ComponentsTabsAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ComponentsToasts as ComponentsToasts } from './components/components/components-toats';

interface HTMLComponentsToastsElement extends ComponentsToasts, HTMLElement {
}
declare var HTMLComponentsToastsElement: {
  prototype: HTMLComponentsToastsElement;
  new (): HTMLComponentsToastsElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "components-toasts": HTMLComponentsToastsElement;
  }
  interface ElementTagNameMap {
      "components-toasts": HTMLComponentsToastsElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "components-toasts": JSXElements.ComponentsToastsAttributes;
      }
  }
  namespace JSXElements {
      export interface ComponentsToastsAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ComponentsToggles as ComponentsToggles } from './components/components/components-toggles';

interface HTMLComponentsTogglesElement extends ComponentsToggles, HTMLElement {
}
declare var HTMLComponentsTogglesElement: {
  prototype: HTMLComponentsTogglesElement;
  new (): HTMLComponentsTogglesElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "components-toggles": HTMLComponentsTogglesElement;
  }
  interface ElementTagNameMap {
      "components-toggles": HTMLComponentsTogglesElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "components-toggles": JSXElements.ComponentsTogglesAttributes;
      }
  }
  namespace JSXElements {
      export interface ComponentsTogglesAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ComponentsTooltips as ComponentsTooltips } from './components/components/components-tooltips';

interface HTMLComponentsTooltipsElement extends ComponentsTooltips, HTMLElement {
}
declare var HTMLComponentsTooltipsElement: {
  prototype: HTMLComponentsTooltipsElement;
  new (): HTMLComponentsTooltipsElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "components-tooltips": HTMLComponentsTooltipsElement;
  }
  interface ElementTagNameMap {
      "components-tooltips": HTMLComponentsTooltipsElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "components-tooltips": JSXElements.ComponentsTooltipsAttributes;
      }
  }
  namespace JSXElements {
      export interface ComponentsTooltipsAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ComponentsTrees as ComponentsTrees } from './components/components/components-trees';

interface HTMLComponentsTreesElement extends ComponentsTrees, HTMLElement {
}
declare var HTMLComponentsTreesElement: {
  prototype: HTMLComponentsTreesElement;
  new (): HTMLComponentsTreesElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "components-trees": HTMLComponentsTreesElement;
  }
  interface ElementTagNameMap {
      "components-trees": HTMLComponentsTreesElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "components-trees": JSXElements.ComponentsTreesAttributes;
      }
  }
  namespace JSXElements {
      export interface ComponentsTreesAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ComponentsTypography as ComponentsTypography } from './components/components/components-typography';

interface HTMLComponentsTypographyElement extends ComponentsTypography, HTMLElement {
}
declare var HTMLComponentsTypographyElement: {
  prototype: HTMLComponentsTypographyElement;
  new (): HTMLComponentsTypographyElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "components-typography": HTMLComponentsTypographyElement;
  }
  interface ElementTagNameMap {
      "components-typography": HTMLComponentsTypographyElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "components-typography": JSXElements.ComponentsTypographyAttributes;
      }
  }
  namespace JSXElements {
      export interface ComponentsTypographyAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { DemoMarkup as DemoMarkup } from './components/demo-markup/demo-markup';

interface HTMLDemoMarkupElement extends DemoMarkup, HTMLElement {
}
declare var HTMLDemoMarkupElement: {
  prototype: HTMLDemoMarkupElement;
  new (): HTMLDemoMarkupElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "demo-markup": HTMLDemoMarkupElement;
  }
  interface ElementTagNameMap {
      "demo-markup": HTMLDemoMarkupElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "demo-markup": JSXElements.DemoMarkupAttributes;
      }
  }
  namespace JSXElements {
      export interface DemoMarkupAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          classes?: string,
          code?: string,
          language?: string,
          demo?: boolean
      }
  }
}

import { GenericsGlobal as GenericsGlobal } from './components/generics/generics-global';

interface HTMLGenericsGlobalElement extends GenericsGlobal, HTMLElement {
}
declare var HTMLGenericsGlobalElement: {
  prototype: HTMLGenericsGlobalElement;
  new (): HTMLGenericsGlobalElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "generics-global": HTMLGenericsGlobalElement;
  }
  interface ElementTagNameMap {
      "generics-global": HTMLGenericsGlobalElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "generics-global": JSXElements.GenericsGlobalAttributes;
      }
  }
  namespace JSXElements {
      export interface GenericsGlobalAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { AboutPage as AboutPage } from './components/getting-started/about-page';

interface HTMLAboutPageElement extends AboutPage, HTMLElement {
}
declare var HTMLAboutPageElement: {
  prototype: HTMLAboutPageElement;
  new (): HTMLAboutPageElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "about-page": HTMLAboutPageElement;
  }
  interface ElementTagNameMap {
      "about-page": HTMLAboutPageElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "about-page": JSXElements.AboutPageAttributes;
      }
  }
  namespace JSXElements {
      export interface AboutPageAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { CustomBuild as CustomBuild } from './components/getting-started/custom-build';

interface HTMLCustomBuildElement extends CustomBuild, HTMLElement {
}
declare var HTMLCustomBuildElement: {
  prototype: HTMLCustomBuildElement;
  new (): HTMLCustomBuildElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "custom-build": HTMLCustomBuildElement;
  }
  interface ElementTagNameMap {
      "custom-build": HTMLCustomBuildElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "custom-build": JSXElements.CustomBuildAttributes;
      }
  }
  namespace JSXElements {
      export interface CustomBuildAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { InstallPage as InstallPage } from './components/getting-started/install-page';

interface HTMLInstallPageElement extends InstallPage, HTMLElement {
}
declare var HTMLInstallPageElement: {
  prototype: HTMLInstallPageElement;
  new (): HTMLInstallPageElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "install-page": HTMLInstallPageElement;
  }
  interface ElementTagNameMap {
      "install-page": HTMLInstallPageElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "install-page": JSXElements.InstallPageAttributes;
      }
  }
  namespace JSXElements {
      export interface InstallPageAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { LandingPage as HomePage } from './components/home-page/home-page';

interface HTMLHomePageElement extends HomePage, HTMLElement {
}
declare var HTMLHomePageElement: {
  prototype: HTMLHomePageElement;
  new (): HTMLHomePageElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "home-page": HTMLHomePageElement;
  }
  interface ElementTagNameMap {
      "home-page": HTMLHomePageElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "home-page": JSXElements.HomePageAttributes;
      }
  }
  namespace JSXElements {
      export interface HomePageAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { ObjectsContainers as ObjectsContainers } from './components/objects/objects-containers';

interface HTMLObjectsContainersElement extends ObjectsContainers, HTMLElement {
}
declare var HTMLObjectsContainersElement: {
  prototype: HTMLObjectsContainersElement;
  new (): HTMLObjectsContainersElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "objects-containers": HTMLObjectsContainersElement;
  }
  interface ElementTagNameMap {
      "objects-containers": HTMLObjectsContainersElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "objects-containers": JSXElements.ObjectsContainersAttributes;
      }
  }
  namespace JSXElements {
      export interface ObjectsContainersAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ObjectsDrawers as ObjectsDrawers } from './components/objects/objects-drawers';

interface HTMLObjectsDrawersElement extends ObjectsDrawers, HTMLElement {
}
declare var HTMLObjectsDrawersElement: {
  prototype: HTMLObjectsDrawersElement;
  new (): HTMLObjectsDrawersElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "objects-drawers": HTMLObjectsDrawersElement;
  }
  interface ElementTagNameMap {
      "objects-drawers": HTMLObjectsDrawersElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "objects-drawers": JSXElements.ObjectsDrawersAttributes;
      }
  }
  namespace JSXElements {
      export interface ObjectsDrawersAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ObjectsGrid as ObjectsGrid } from './components/objects/objects-grid';

interface HTMLObjectsGridElement extends ObjectsGrid, HTMLElement {
}
declare var HTMLObjectsGridElement: {
  prototype: HTMLObjectsGridElement;
  new (): HTMLObjectsGridElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "objects-grid": HTMLObjectsGridElement;
  }
  interface ElementTagNameMap {
      "objects-grid": HTMLObjectsGridElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "objects-grid": JSXElements.ObjectsGridAttributes;
      }
  }
  namespace JSXElements {
      export interface ObjectsGridAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ObjectsImages as ObjectsImages } from './components/objects/objects-images';

interface HTMLObjectsImagesElement extends ObjectsImages, HTMLElement {
}
declare var HTMLObjectsImagesElement: {
  prototype: HTMLObjectsImagesElement;
  new (): HTMLObjectsImagesElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "objects-images": HTMLObjectsImagesElement;
  }
  interface ElementTagNameMap {
      "objects-images": HTMLObjectsImagesElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "objects-images": JSXElements.ObjectsImagesAttributes;
      }
  }
  namespace JSXElements {
      export interface ObjectsImagesAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ObjectsMedias as ObjectsMedias } from './components/objects/objects-medias';

interface HTMLObjectsMediasElement extends ObjectsMedias, HTMLElement {
}
declare var HTMLObjectsMediasElement: {
  prototype: HTMLObjectsMediasElement;
  new (): HTMLObjectsMediasElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "objects-medias": HTMLObjectsMediasElement;
  }
  interface ElementTagNameMap {
      "objects-medias": HTMLObjectsMediasElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "objects-medias": JSXElements.ObjectsMediasAttributes;
      }
  }
  namespace JSXElements {
      export interface ObjectsMediasAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ObjectsModals as ObjectsModals } from './components/objects/objects-modals';

interface HTMLObjectsModalsElement extends ObjectsModals, HTMLElement {
}
declare var HTMLObjectsModalsElement: {
  prototype: HTMLObjectsModalsElement;
  new (): HTMLObjectsModalsElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "objects-modals": HTMLObjectsModalsElement;
  }
  interface ElementTagNameMap {
      "objects-modals": HTMLObjectsModalsElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "objects-modals": JSXElements.ObjectsModalsAttributes;
      }
  }
  namespace JSXElements {
      export interface ObjectsModalsAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { ObjectsPanels as ObjectsPanels } from './components/objects/objects-panels';

interface HTMLObjectsPanelsElement extends ObjectsPanels, HTMLElement {
}
declare var HTMLObjectsPanelsElement: {
  prototype: HTMLObjectsPanelsElement;
  new (): HTMLObjectsPanelsElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "objects-panels": HTMLObjectsPanelsElement;
  }
  interface ElementTagNameMap {
      "objects-panels": HTMLObjectsPanelsElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "objects-panels": JSXElements.ObjectsPanelsAttributes;
      }
  }
  namespace JSXElements {
      export interface ObjectsPanelsAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { BlazeSite as BlazeSite } from './components/site/blaze-site';

interface HTMLBlazeSiteElement extends BlazeSite, HTMLElement {
}
declare var HTMLBlazeSiteElement: {
  prototype: HTMLBlazeSiteElement;
  new (): HTMLBlazeSiteElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "blaze-site": HTMLBlazeSiteElement;
  }
  interface ElementTagNameMap {
      "blaze-site": HTMLBlazeSiteElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "blaze-site": JSXElements.BlazeSiteAttributes;
      }
  }
  namespace JSXElements {
      export interface BlazeSiteAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { GithubCorner as GithubCorner } from './components/site/github-corner/github-corner';

interface HTMLGithubCornerElement extends GithubCorner, HTMLElement {
}
declare var HTMLGithubCornerElement: {
  prototype: HTMLGithubCornerElement;
  new (): HTMLGithubCornerElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "github-corner": HTMLGithubCornerElement;
  }
  interface ElementTagNameMap {
      "github-corner": HTMLGithubCornerElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "github-corner": JSXElements.GithubCornerAttributes;
      }
  }
  namespace JSXElements {
      export interface GithubCornerAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { PageTemplate as PageTemplate } from './components/site/page-template';

interface HTMLPageTemplateElement extends PageTemplate, HTMLElement {
}
declare var HTMLPageTemplateElement: {
  prototype: HTMLPageTemplateElement;
  new (): HTMLPageTemplateElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "page-template": HTMLPageTemplateElement;
  }
  interface ElementTagNameMap {
      "page-template": HTMLPageTemplateElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "page-template": JSXElements.PageTemplateAttributes;
      }
  }
  namespace JSXElements {
      export interface PageTemplateAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { SiteHeader as SiteHeader } from './components/site/site-header/site-header';

interface HTMLSiteHeaderElement extends SiteHeader, HTMLElement {
}
declare var HTMLSiteHeaderElement: {
  prototype: HTMLSiteHeaderElement;
  new (): HTMLSiteHeaderElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "site-header": HTMLSiteHeaderElement;
  }
  interface ElementTagNameMap {
      "site-header": HTMLSiteHeaderElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "site-header": JSXElements.SiteHeaderAttributes;
      }
  }
  namespace JSXElements {
      export interface SiteHeaderAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { SiteNav as SiteNav } from './components/site/site-nav/site-nav';

interface HTMLSiteNavElement extends SiteNav, HTMLElement {
}
declare var HTMLSiteNavElement: {
  prototype: HTMLSiteNavElement;
  new (): HTMLSiteNavElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "site-nav": HTMLSiteNavElement;
  }
  interface ElementTagNameMap {
      "site-nav": HTMLSiteNavElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "site-nav": JSXElements.SiteNavAttributes;
      }
  }
  namespace JSXElements {
      export interface SiteNavAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { SiteSearch as SiteSearch } from './components/site/site-search/site-search';

interface HTMLSiteSearchElement extends SiteSearch, HTMLElement {
}
declare var HTMLSiteSearchElement: {
  prototype: HTMLSiteSearchElement;
  new (): HTMLSiteSearchElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "site-search": HTMLSiteSearchElement;
  }
  interface ElementTagNameMap {
      "site-search": HTMLSiteSearchElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "site-search": JSXElements.SiteSearchAttributes;
      }
  }
  namespace JSXElements {
      export interface SiteSearchAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { UtilsAlignment as UtilsAlignment } from './components/utils/utils-alignment';

interface HTMLUtilsAlignmentElement extends UtilsAlignment, HTMLElement {
}
declare var HTMLUtilsAlignmentElement: {
  prototype: HTMLUtilsAlignmentElement;
  new (): HTMLUtilsAlignmentElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "utils-alignment": HTMLUtilsAlignmentElement;
  }
  interface ElementTagNameMap {
      "utils-alignment": HTMLUtilsAlignmentElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "utils-alignment": JSXElements.UtilsAlignmentAttributes;
      }
  }
  namespace JSXElements {
      export interface UtilsAlignmentAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { UtilsBoxing as UtilsBoxing } from './components/utils/utils-boxing';

interface HTMLUtilsBoxingElement extends UtilsBoxing, HTMLElement {
}
declare var HTMLUtilsBoxingElement: {
  prototype: HTMLUtilsBoxingElement;
  new (): HTMLUtilsBoxingElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "utils-boxing": HTMLUtilsBoxingElement;
  }
  interface ElementTagNameMap {
      "utils-boxing": HTMLUtilsBoxingElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "utils-boxing": JSXElements.UtilsBoxingAttributes;
      }
  }
  namespace JSXElements {
      export interface UtilsBoxingAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { UtilsColors as UtilsColors } from './components/utils/utils-colors';

interface HTMLUtilsColorsElement extends UtilsColors, HTMLElement {
}
declare var HTMLUtilsColorsElement: {
  prototype: HTMLUtilsColorsElement;
  new (): HTMLUtilsColorsElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "utils-colors": HTMLUtilsColorsElement;
  }
  interface ElementTagNameMap {
      "utils-colors": HTMLUtilsColorsElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "utils-colors": JSXElements.UtilsColorsAttributes;
      }
  }
  namespace JSXElements {
      export interface UtilsColorsAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { UtilsElevation as UtilsElevation } from './components/utils/utils-elevation';

interface HTMLUtilsElevationElement extends UtilsElevation, HTMLElement {
}
declare var HTMLUtilsElevationElement: {
  prototype: HTMLUtilsElevationElement;
  new (): HTMLUtilsElevationElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "utils-elevation": HTMLUtilsElevationElement;
  }
  interface ElementTagNameMap {
      "utils-elevation": HTMLUtilsElevationElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "utils-elevation": JSXElements.UtilsElevationAttributes;
      }
  }
  namespace JSXElements {
      export interface UtilsElevationAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { UtilsSizes as UtilsSizes } from './components/utils/utils-sizes';

interface HTMLUtilsSizesElement extends UtilsSizes, HTMLElement {
}
declare var HTMLUtilsSizesElement: {
  prototype: HTMLUtilsSizesElement;
  new (): HTMLUtilsSizesElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "utils-sizes": HTMLUtilsSizesElement;
  }
  interface ElementTagNameMap {
      "utils-sizes": HTMLUtilsSizesElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "utils-sizes": JSXElements.UtilsSizesAttributes;
      }
  }
  namespace JSXElements {
      export interface UtilsSizesAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

import { UtilsVisibility as UtilsVisibility } from './components/utils/utils-visibility';

interface HTMLUtilsVisibilityElement extends UtilsVisibility, HTMLElement {
}
declare var HTMLUtilsVisibilityElement: {
  prototype: HTMLUtilsVisibilityElement;
  new (): HTMLUtilsVisibilityElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "utils-visibility": HTMLUtilsVisibilityElement;
  }
  interface ElementTagNameMap {
      "utils-visibility": HTMLUtilsVisibilityElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "utils-visibility": JSXElements.UtilsVisibilityAttributes;
      }
  }
  namespace JSXElements {
      export interface UtilsVisibilityAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string
      }
  }
}

